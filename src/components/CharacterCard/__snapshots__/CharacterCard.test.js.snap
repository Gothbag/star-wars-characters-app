// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CharacterCard/> renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CharacterCard
    character={Object {}}
    films={Object {}}
    loadPlanet={[Function]}
    loadSpecies={[Function]}
    planets={Object {}}
    species={Object {}}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="panel-heading"
>
          Search for a character
</div>,
        false,
      ],
      "className": "panel panel-default",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Search for a character",
          "className": "panel-heading",
        },
        "ref": null,
        "rendered": "Search for a character",
        "type": "div",
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="panel-heading"
>
            Search for a character
</div>,
          false,
        ],
        "className": "panel panel-default",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Search for a character",
            "className": "panel-heading",
          },
          "ref": null,
          "rendered": "Search for a character",
          "type": "div",
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`<CharacterCard/> should call the loadPlanet and loadSpecies props if the character is not empty 1`] = `0`;

exports[`<CharacterCard/> should call the loadPlanet and loadSpecies props if the character is not empty 2`] = `0`;

exports[`<CharacterCard/> shouldn't call the loadPlanet and loadSpecies props if matching 1`] = `0`;

exports[`<CharacterCard/> shouldn't call the loadPlanet and loadSpecies props if matching 2`] = `0`;

exports[`<CharacterCard/> shouldn't call the loadPlanet and loadSpecies props if the planets and species props have matching ids 1`] = `0`;

exports[`<CharacterCard/> shouldn't call the loadPlanet and loadSpecies props if the planets and species props have matching ids 2`] = `0`;

exports[`renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CharacterCard
    character={Object {}}
    films={Object {}}
    loadPlanet={[Function]}
    loadSpecies={[Function]}
    planets={Object {}}
    species={Object {}}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="panel-heading"
>
          Search for a character
</div>,
        false,
      ],
      "className": "panel panel-default",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Search for a character",
          "className": "panel-heading",
        },
        "ref": null,
        "rendered": "Search for a character",
        "type": "div",
      },
      false,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="panel-heading"
>
            Search for a character
</div>,
          false,
        ],
        "className": "panel panel-default",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Search for a character",
            "className": "panel-heading",
          },
          "ref": null,
          "rendered": "Search for a character",
          "type": "div",
        },
        false,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
